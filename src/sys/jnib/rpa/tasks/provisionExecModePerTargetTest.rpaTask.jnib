// Copyright (C) 2022 Gluware - All Rights Reserved
// This feature package is provided as is with no implied warranties or fitness for a particular purpose.
// Gluware, Inc. will not provide maintenance, support, updates, enhancements or modifications.

"@Info": {
    "displayName": "Test - Provision Exec Mode Per Target Test",
    "category": "RPA JNIB Tests",
    "tags": [""],
    "description": "Launches unique provisioning per target",
    "auth": "operate",
    "configTypeRef" : "/sys/type/construct/rpaConfig/provisonExecModePerTargetTest.jtype",
    "interactiveRuntimeRef" : null,
    "executionMode": "provision"
},

run: function() {
    var rpaConfig = _.get(getStartObj(), "rpaConfig", {});
    var targetRefs = _.get(getStartObj(), "rpaState.targetRefs", {});
    var targetActionStructVar = _.get(rpaConfig, "targetActionStructVar", {});
    var processTargetVar = _.isEmpty(targetActionStructVar);
    if (typeof targetActionStructVar === 'string' && processTargetVar === false) {
    	targetActionStructVar = JSON.parse(targetActionStructVar);
	}
    
    if (rpaConfig.script) {
    	var scriptType = thisNib.getScriptType(rpaConfig.script);
        var scriptInstanceName = thisNib.getScriptInstanceName(rpaConfig.script);
        
        var scriptPath = "/org/instance/construct/script/" + scriptType + "/" + scriptInstanceName + ".json";
        log.info("Script Path: " + scriptPath);
    }
    

    var targetActionStruct = {};
    
	for (var target in targetRefs) {
		var entityId = _.get(targetRefs[target], "device.entityId");
		var name = _.get(targetRefs[target], "device.name");
		
		if (!processTargetVar) {
			if (_.get(targetActionStructVar, entityId, false)) {
				targetActionStruct[entityId] = targetActionStructVar[entityId];
			} else {
				targetActionStruct[entityId] = targetActionStructVar;
			}
		} else {
			var actionStruct = {
	    		"actionMode": (rpaConfig.preview) ? "preview" : "provision",
	            "forceProvisioning": true,
	            "userCapturedData": {
	                "summaryDescription" : _.get(rpaConfig, "summaryDescription"),
	                "addedLog" : _.get(rpaConfig, "addedLog"),
	            },
	            "actionRequests": [
	                {
	                    "actionKey": scriptPath
	                }
	            ],
	            "startObj": { // control
	                "auxActionData": {
	                    "startObjAuxActionData": true
	                }
	            },
	            "explicitOrder": true
	        };
			log.info("Launching with following action struct: " + JSON.stringify(actionStruct));
		    
		    targetActionStruct[entityId] = actionStruct;
		}
	}
    
    _.set(getFinishObj(), ['rpaResult', 'targetActionStruct'], targetActionStruct);
    log.tag({actionStruct: getFinishObj().rpaResult.actionStruct}).debug("Watching finishObj");
},

getScriptType: function(obj) {
	if (!obj) {
		abort(-11, "FATAL: Failed to Retrieve the Metadata from an Empty Object for getScriptType()");
	}
	
	if (obj["@source"] !== undefined) {
		var source = obj["@source"].typeKey.jmatch(/script\/([a-zA-Z0-9-_ ]+)/);
		return source[1];
	}
	else if (obj["@meta"] !== undefined) {
		var source = obj["@meta"].path.jmatch(/script\/([a-zA-Z0-9-_ ]+)/);
		return source[1];
	}
	else {
		return undefined;
	}
},

getScriptInstanceName: function(obj) {
	if (!obj) {
		abort(-11, "FATAL: Failed to Retrieve the Metadata from an Empty Object for getScriptInstanceName()");
	}
	
	if (obj["@source"] !== undefined) {
		return obj["@source"].instanceName;
	}
	else if (obj["@meta"] !== undefined) {
		var source = obj["@meta"].path.jmatch(/script\/\w+\/([a-zA-Z0-9-_ @\.]+)/);
		return source[1].replace(/\.json/, "");
	}
	else {
		return undefined;
	}
}